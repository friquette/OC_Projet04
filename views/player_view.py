""" This module contains the view of the player."""
from utility import Utils
from uuid import uuid4

from models.player import Gender
from controllers.player_manager import player_manager


class PlayerView:
    """ Class of the player view

    This class contains different methods to display the information of a player. It contains 4 methods:
    display_player_creation: asks all the information needed to create a player to the user. The id
                is automatically generated by the uuid module.
    ask_redo_player_creation: asks the user if he wants to create an other player.
    sort_player_by_name: sorts all the players by last name and first name and displays them.
    sort_player_by_rank: sorts all the player by rank, last name and first name and displays them.

    """
    def __init__(self):
        self.utils = Utils()

        self.redo_choices = ['Oui', 'Non']
        self.redo = None
        self.user_id_choice = None
        self.user_choice = None

    def display_player_creation(self):
        """ Display the creation player functionality.

        Set the layout of the creation player functionality. Calls the get_player_info function of
        the controller player to display the different steps of the creation.

        """
        print("~~~~~~~~~~Création d'un joueur~~~~~~~~~~")
        player_id = uuid4()
        last_name = self.utils.ask_pattern('Nom: ')
        first_name = self.utils.ask_pattern('Prénom: ')
        birthdate = self.utils.ask_date('Date de naissance (AAAA-MM-JJ): ', True)
        print("Genre: ")
        gender = self.utils.ask_choices(list(Gender))
        rank = self.utils.ask_int('Classement: ')
        player_params = {'identifier': player_id, 'last_name': last_name, 'first_name': first_name,
                              'birthdate': birthdate, 'gender': gender, 'rank': rank}

        player_manager.create_player(player_params)
        self.ask_redo_player_creation()

    def ask_redo_player_creation(self):
        print('Voulez-vous créer un nouveau joueur ?')
        self.redo = self.utils.ask_choices(self.redo_choices)

    def sort_player_by_name(self):
        sort_by_last_name = sorted(player_manager.players.items(), key=lambda player: (player[1]['last_name'], player[1]['first_name']))

        for player in sort_by_last_name:
            print(f"ID: {player[1]['identifier']}, "
                  f"Nom: {player[1]['last_name']}, "
                  f"Prenom: {player[1]['first_name']}, "
                  f"Date de naissance: {player[1]['birthdate']}, "
                  f"Genre: {player[1]['gender']}, "
                  f"Classement: {player[1]['rank']}")
        
    def sort_player_by_rank(self):
        sort_by_rank = sorted(player_manager.players.items(), key=lambda player: (player[1]['rank'], player[1]['last_name'], player[1]['first_name']))

        for player in sort_by_rank:
            print(f"ID: {player[1]['identifier']}, "
                  f"Nom: {player[1]['last_name']}, "
                  f"Prenom: {player[1]['first_name']}, "
                  f"Date de naissance: {player[1]['birthdate']}, "
                  f"Genre: {player[1]['gender']}, "
                  f"Classement: {player[1]['rank']}")


player_creation = PlayerView()
